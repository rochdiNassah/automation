#!/usr/bin/env php
<?php declare(strict_types=1, ticks=1);

require __DIR__.'/vendor/autoload.php';

use Automation\Framework\Application;
use Automation\Framework\Facades\{Slack, Console};
use Automation\Framework\Interfaces\JobInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\GuzzleException;

Application::instance()->run();

app()->instantiateJobs();
app('slack')->channel('debug');

$jobs = app()->getInstancesOf(JobInterface::class);

$iteration = 0;

try {
    Slack::send(sprintf('Automation daemon has started at %s! Jobs will run every %s-minute.', date('H:i'), app('sleep_for')));

    while (true) {
        foreach ($jobs as $job) {
            $name = (new ReflectionObject($job))->getShortName();

            dump(sprintf('Executing "%s" job...', $name));
            
            try {
                app($job);
            } catch (Throwable $e) {
                dump(sprintf('Failed to execute "%s" job!', $name));

                if ($e instanceof GuzzleException) {
                    app($job);
                }

                dump($e->getMessage());

                continue;
            }

            dump(sprintf('Executed "%s" job successfully!', $name));
        }

        Slack::send(sprintf('Automation daemon has done %s iteration!', ++$iteration));

        sleep((int) app('sleep_for') * 60);
    }
} catch (Throwable $e) {
    if ($e instanceof ConnectException) {
        Console::signal(SIGTERM);
    }

    Slack::send(sprintf('Action required! Daemon got an exception and stopped at %s!', date('H:i')));

    throw $e;
}
